"use strict";(self.webpackChunk_plone_volto=self.webpackChunk_plone_volto||[]).push([[4304],{"./src/components/manage/Controlpanels/UpgradeControlPanel.jsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:function(){return Controlpanels_UpgradeControlPanel}});var react=__webpack_require__("../../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js"),es=__webpack_require__("../../../node_modules/.pnpm/react-redux@8.1.2_@types+react-dom@18.2.12_@types+react@18.2.27_react-dom@18.2.0_react@18.2.0__react@18.2.0_redux@4.2.1/node_modules/react-redux/es/index.js"),redux=__webpack_require__("../../../node_modules/.pnpm/redux@4.2.1/node_modules/redux/es/redux.js"),react_router_dom=__webpack_require__("../../../node_modules/.pnpm/react-router-dom@5.2.0_react@18.2.0/node_modules/react-router-dom/esm/react-router-dom.js"),react_dom=__webpack_require__("../../../node_modules/.pnpm/react-dom@18.2.0_react@18.2.0/node_modules/react-dom/index.js"),Message=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/collections/Message/Message.js"),Container=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/elements/Container/Container.js"),Segment=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js"),Table=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"),Form=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/collections/Form/Form.js"),Button=__webpack_require__("../../../node_modules/.pnpm/semantic-ui-react@2.1.5_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/semantic-ui-react/dist/es/elements/Button/Button.js"),lib=__webpack_require__("../../../node_modules/.pnpm/react-intl@3.12.1_react@18.2.0/node_modules/react-intl/lib/index.js"),message=__webpack_require__("../../../node_modules/.pnpm/react-intl@3.12.1_react@18.2.0/node_modules/react-intl/lib/components/message.js"),injectIntl=__webpack_require__("../../../node_modules/.pnpm/react-intl@3.12.1_react@18.2.0/node_modules/react-intl/lib/components/injectIntl.js"),map=__webpack_require__("../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/map.js"),map_default=__webpack_require__.n(map),controlpanels=__webpack_require__("./src/actions/controlpanels/controlpanels.js"),ActionTypes=__webpack_require__("./src/constants/ActionTypes.js");var Helmet=__webpack_require__("./src/helpers/Helmet/Helmet.jsx"),Icon=__webpack_require__("./src/components/theme/Icon/Icon.jsx"),Toast=__webpack_require__("./src/components/manage/Toast/Toast.jsx"),Toolbar=__webpack_require__("./src/components/manage/Toolbar/Toolbar.jsx"),Controlpanels=__webpack_require__("./src/components/manage/Controlpanels/index.tsx"),back=__webpack_require__("./src/icons/back.svg"),back_default=__webpack_require__.n(back),react_toastify=__webpack_require__("../../../node_modules/.pnpm/react-toastify@5.5.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-toastify/esm/react-toastify.js"),__jsx=react.createElement;const messages=(0,lib.defineMessages)({back:{id:"Back",defaultMessage:"Back"},upgradeInformation:{id:"Upgrade Plone Site",defaultMessage:"Upgrade Plone Site"},upgrade:{id:"Upgrade Plone Site",defaultMessage:"Upgrade Plone Site"},upgradeSuccess:{id:"Your site is up to date.",defaultMessage:"Your site is up to date."},dryRunSuccess:{id:"Dry run selected, transaction aborted.",defaultMessage:"Dry run selected, transaction aborted."},upgradeError:{id:"There was an error with the upgrade.",defaultMessage:"There was an error with the upgrade."}}),UpgradeStep=({title:title,steps:steps})=>{const stepTitles=steps.map((step=>step.title));return __jsx(Message.c,null,__jsx(Message.c.Header,null,title),__jsx(Message.c.List,{items:stepTitles}))};class UpgradeControlPanel extends react.Component{constructor(props){super(props),this.runUpgrade=this.runUpgrade.bind(this),this.state={isClient:!1,dryRun:!1}}componentDidMount(){this.props.getUpgradeInformation(),this.props.getSystemInformation(),this.setState({isClient:!0,dryRun:!1})}runUpgrade(dryRun){this.props.runUpgrade(dryRun).then((()=>{dryRun?react_toastify.toast.success(__jsx(Toast.c,{success:!0,title:this.props.intl.formatMessage(messages.upgrade),content:this.props.intl.formatMessage(messages.dryRunSuccess)})):(this.props.getUpgradeInformation(),react_toastify.toast.success(__jsx(Toast.c,{success:!0,title:this.props.intl.formatMessage(messages.upgrade),content:this.props.intl.formatMessage(messages.upgradeSuccess)})))})).catch((()=>{react_toastify.toast.error(__jsx(Toast.c,{error:!0,title:this.props.intl.formatMessage(messages.upgrade),content:this.props.intl.formatMessage(messages.upgradeError)}))}))}render(){const upgradeInformation=this.props.upgradeInformation,upgradeSteps=upgradeInformation?Object.entries(upgradeInformation.upgrade_steps):null;return upgradeInformation?__jsx(Container.c,{id:"upgrade-page",className:"controlpanel-upgrade"},__jsx(Helmet.c,{title:this.props.intl.formatMessage(messages.upgradeInformation)}),__jsx(Segment.c.Group,{raised:!0},__jsx(Segment.c,{className:"primary"},__jsx(message.c,{id:"Upgrade Plone Site",defaultMessage:"Upgrade Plone Site"})),__jsx(Segment.c,{className:"secondary"},__jsx(message.c,{id:"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide.",defaultMessage:"More information about the upgrade procedure can be found in the documentation section of plone.org in the Upgrade Guide."})),__jsx(Message.c,{attached:!0},__jsx(Message.c.Header,null,__jsx(message.c,{id:"Configuration Versions",defaultMessage:"Configuration Versions"}))),__jsx(Segment.c,null,upgradeInformation.versions.fs===upgradeInformation.versions.instance?__jsx(Message.c,{attached:!0,success:!0},__jsx(message.c,{id:"Your site is up to date.",defaultMessage:"Your site is up to date."})):__jsx(Message.c,{attached:!0,warning:!0},__jsx(message.c,{id:"The site configuration is outdated and needs to be upgraded.",defaultMessage:"The site configuration is outdated and needs to be upgraded."})),__jsx(Table.c,{celled:!0,padded:!0,columns:"2"},__jsx(Table.c.Body,null,__jsx(Table.c.Row,null,__jsx(Table.c.Cell,null,__jsx(message.c,{id:"Current active configuration",defaultMessage:"Current active configuration"})),__jsx(Table.c.Cell,null,upgradeInformation.versions.instance)),__jsx(Table.c.Row,null,__jsx(Table.c.Cell,null,__jsx(message.c,{id:"Latest available configuration",defaultMessage:"Latest available configuration"})),__jsx(Table.c.Cell,null,upgradeInformation.versions.fs))))),upgradeSteps.length>0&&__jsx(react.Fragment,null,__jsx(Message.c,{attached:!0},__jsx(Message.c.Header,null,__jsx(message.c,{id:"Upgrade Steps",defaultMessage:"Upgrade Steps"})),__jsx(Message.c.Content,null,__jsx(message.c,{id:"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient.",defaultMessage:"The following list shows which upgrade steps are going to be run. Upgrading sometimes performs a catalog/security update, which may take a long time on large sites. Be patient."}))),__jsx(Segment.c,null,__jsx(Container.c,null,map_default()(upgradeSteps,(upgradeGroup=>[__jsx(UpgradeStep,{key:upgradeGroup[0],title:upgradeGroup[0],steps:upgradeGroup[1]})]))),__jsx(Message.c,{negative:!0},__jsx(message.c,{id:"Please ensure you have a backup of your site before performing the upgrade.",defaultMessage:"Please ensure you have a backup of your site before performing the upgrade."})),__jsx(Form.c.Checkbox,{onChange:(e,data)=>this.setState({dryRun:data.checked}),checked:this.state.dryRun,label:"Dry run mode"}),__jsx("br",null),__jsx(Button.c,{"aria-label":this.props.intl.formatMessage({id:"Upgrade",defaultMessage:"Upgrade"}),onClick:()=>this.runUpgrade(this.state.dryRun),primary:!0},__jsx(message.c,{id:"Upgrade",defaultMessage:"Upgrade"})))),this.props.upgradeReport?__jsx(react.Fragment,null,__jsx(Message.c,{attached:!0},__jsx(Message.c.Header,null,__jsx(message.c,{id:"Upgrade Report",defaultMessage:"Upgrade Report"}))),__jsx(Segment.c,null,__jsx("pre",null,this.props.upgradeReport.report))):null,__jsx(Message.c,{attached:!0},__jsx(Message.c.Header,null,__jsx(message.c,{id:"Version Overview",defaultMessage:"Version Overview"}))),__jsx(Segment.c,null,this.props.systemInformation?__jsx(Controlpanels.yC,this.props.systemInformation):null)),this.state.isClient&&(0,react_dom.createPortal)(__jsx(Toolbar.c,{pathname:this.props.pathname,hideDefaultViewButtons:!0,inner:__jsx(react.Fragment,null,__jsx(react_router_dom.cH,{to:"/controlpanel",className:"item"},__jsx(Icon.c,{name:back_default(),"aria-label":this.props.intl.formatMessage(messages.back),className:"contents circled",size:"30px",title:this.props.intl.formatMessage(messages.back)})))}),document.getElementById("toolbar"))):null}}var Controlpanels_UpgradeControlPanel=(0,redux.compose)(injectIntl.cp,(0,es.connect)(((state,props)=>({upgradeInformation:state.upgrade.upgradeinformation,pathname:props.location.pathname,systemInformation:state.controlpanels.systeminformation,upgradeReport:state.upgrade.upgradereport})),{getUpgradeInformation:function getUpgradeInformation(){return{type:ActionTypes.wn,request:{op:"get",path:"/@upgrade"}}},getSystemInformation:controlpanels._d,runUpgrade:function runUpgrade(dryRun){return{type:ActionTypes.AV,request:{op:"post",path:"/@upgrade",data:{dryRun:dryRun}}}}}))(UpgradeControlPanel);UpgradeControlPanel.__docgenInfo={description:"UpgradeControlPanel class.\n@class UpgradeControlPanel\n@extends Component",methods:[{name:"runUpgrade",docblock:"Run Upgrade handler\n@method runUpgrade\n@param {boolean} dryRun Id of package to install.\n@returns {undefined}",modifiers:[],params:[{name:"dryRun",description:"Id of package to install.",type:{name:"boolean"},optional:!1}],returns:{},description:"Run Upgrade handler"}],displayName:"UpgradeControlPanel",props:{getUpgradeInformation:{description:"",type:{name:"func"},required:!0},getSystemInformation:{description:"",type:{name:"func"},required:!0},runUpgrade:{description:"",type:{name:"func"},required:!0}}}}}]);